---
description: 
globs: src/**
alwaysApply: false
---
You are working on the Pokestar project. Pokestar is a Discord Bot that allows users to catch, train, and battle with Pokemon. Pokestar is run using Discord.js on the node runtime, and uses MongoDB for storage. It uses JSDoc for optional typing with a Typescript type engine. 

Project Structure (not all directories included):
- `src/`
  - `battle/`
    - `data/` - Pokemon, moves, abilities, and items data
    - `engine/` - Battle simulation logic

  - `commands/` - Entrypoint for all user-triggered Discord commands
  - `handlers/` - Handlers for user-triggered commands and component interactions

  - `config/` - Configurations for various parts of the Bot
  - `services/` - Re-usable code that handles most of the Bot's business logic and interact with the database
  - `utils/` - Helper functions and utilities

  - `deact/` - React-inspired framework to construct UI for the Bot to send
  - `elements/` - Frontend "components" using the `deact` framework
  - `embeds/` - Discord Embeds with visual information and text that are to be sent to the user
  - `hooks/` - Hooks to be used by `deact` elements
  - `modals/` - Modals which are shown to the user and to be used by `deact` elements
  
  - `components/` - DEPRECATED components for users to interact with
  - `events/` - DEPRECATED handling of the deprecated `components/` interactions

## Cross-System Interactions

### Command Flow
1. `commands/` files define Discord slash commands
2. Command handlers in `handlers/` process commands
3. Handlers call `services/` for business logic
4. Results returned as `embeds/` or `elements/` for display

### State Management
- [state.js](mdc:src/services/state.js) manages temporary state between interactions
- State is passed via component IDs (as UUID) in Discord interactions
- All interaction handlers should retrieve and update state

## Key Patterns to Follow

1. **Service Layer Pattern**: 
   - Business logic belongs in `services/` 
   - Services communicate with database, not commands or handlers
   - Example: User commands → handlers → Pokémon service → database

2. **Deact UI Pattern**:
   ```javascript
   // Create UI elements with deact
   return createElement(
     'pokemon-display',
     { pokemon, trainerId },
     // No children supported yet
   );
   ```

3. **State Management**:
   ```javascript
   // Store state
   const stateId = await state.set(data, { ttl: 600 });
   
   // Retrieve state in handlers
   const data = await state.get(stateId);
   ```

4. **Database Access**:
   ```javascript
   // Preferred: QueryBuilder (when suitable)
   const query = new QueryBuilder(collectionNames.USERS)
     .where({ userId })
     .limit(1);
   const user = await query.findOne();
   
   // Alternative: Direct access 
   const user = await mongoHandler.findOne(collectionNames.USERS, { userId });
   ```
5. **Configurations**:
  This bot relies heavily on configuration files in `src/config/`. You may refer to these configurations, but do not modify them unless explicitly told to.

## Subsystem-Specific Rules

Some subsystems have their own specific rules with more detail:

- Battle System: `battle-system.mdc`
- Database: `database.mdc` (if created)
- Deact UI: `deact.mdc` (if created)

## Common Gotchas

1. **Async/Await**: Almost all service calls and database operations are asynchronous. Always use `await`.

2. **Discord Limitations**: 
   - Component IDs have length limits (100 chars)
   - Message content has size limits
   - Interactions must be acknowledged within 3 seconds

3. **Database Performance**: 
   - Use indexes for frequently queried fields
   - Avoid unbounded queries without limits

4. **Discord.js Version**: The project uses Discord.js v14 API conventions

## File Naming and Organization

- Consistent kebab-case for files within a directory
- Each file should focus on a single responsibility
- Group related functionality in directories
- Main command files should match Discord command names

## Tips

- Refer to README files in a directory or parent directories for more comprehensive documentation
  - Do not refer to the [README.md](mdc:README.md) at the project's root
- Many directories have a `types.js` file with types that you can refer to
- Update the JSDoc comments for functions or files that are confusing or inaccurate





